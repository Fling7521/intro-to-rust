// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add1() -> i32 {
    let mut _0: i32;
    let mut _1: i32;
    let mut _2: &mut i32;
    let mut _3: (i32, bool);
    scope 1 {
        debug x => _1;
        scope 2 {
            debug x_ref => _2;
        }
    }

    bb0: {
        _1 = const 42_i32;
        _2 = &mut _1;
        _3 = AddWithOverflow((*_2), const 1_i32);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 1_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        (*_2) = move (_3.0: i32);
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: i32;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }

    bb0: {
        _3 = add1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _12 = const main::promoted[0];
        _1 = (move _2, _12);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _7 = (*_4);
        _8 = (*_5);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        return;
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<i32, i32>(move _9, _4, _5, move _11) -> unwind continue;
    }
}

const main::promoted[0]: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 43_i32;
        _0 = &_1;
        return;
    }
}
