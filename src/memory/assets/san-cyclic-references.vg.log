==165066== Memcheck, a memory error detector
==165066== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==165066== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==165066== Command: ./san-cyclic-references
==165066== Parent PID: 24939
==165066== 
==165066== 
==165066== HEAP SUMMARY:
==165066==     in use at exit: 144 bytes in 3 blocks
==165066==   total heap usage: 12 allocs, 9 frees, 2,304 bytes allocated
==165066== 
==165066== 144 (48 direct, 96 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 3
==165066==    at 0x4840808: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==165066==    by 0x11E32A: alloc::alloc::alloc (alloc.rs:100)
==165066==    by 0x11E436: alloc::alloc::Global::alloc_impl (alloc.rs:183)
==165066==    by 0x11E267: allocate (alloc.rs:243)
==165066==    by 0x11E267: alloc::alloc::exchange_malloc (alloc.rs:332)
==165066==    by 0x11D56C: new<alloc::rc::RcBox<core::cell::RefCell<san_cyclic_references::TreeNode>>> (boxed.rs:218)
==165066==    by 0x11D56C: alloc::rc::Rc<T>::new (rc.rs:398)
==165066==    by 0x11DA0A: san_cyclic_references::main (san-cyclic-references.rs:33)
==165066==    by 0x11CF3A: core::ops::function::FnOnce::call_once (function.rs:250)
==165066==    by 0x11E67D: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==165066==    by 0x11E6F0: std::rt::lang_start::{{closure}} (rt.rs:159)
==165066==    by 0x134E5F: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==165066==    by 0x134E5F: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==165066==    by 0x134E5F: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==165066==    by 0x134E5F: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==165066==    by 0x134E5F: {closure#2} (rt.rs:141)
==165066==    by 0x134E5F: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==165066==    by 0x134E5F: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==165066==    by 0x134E5F: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==165066==    by 0x134E5F: std::rt::lang_start_internal (rt.rs:141)
==165066==    by 0x11E6C9: std::rt::lang_start (rt.rs:158)
==165066==    by 0x11DDBD: main (in /tmp/san-cyclic-references)
==165066== 
==165066== LEAK SUMMARY:
==165066==    definitely lost: 48 bytes in 1 blocks
==165066==    indirectly lost: 96 bytes in 2 blocks
==165066==      possibly lost: 0 bytes in 0 blocks
==165066==    still reachable: 0 bytes in 0 blocks
==165066==         suppressed: 0 bytes in 0 blocks
==165066== 
==165066== For lists of detected and suppressed errors, rerun with: -s
==165066== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
