==41511== Memcheck, a memory error detector
==41511== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==41511== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==41511== Command: ./san-out-of-bounds
==41511== Parent PID: 24939
==41511== 
==41511== Invalid write of size 1
==41511==    at 0x484AD2E: memset (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==41511==    by 0x11CB89: write_bytes<u8> (intrinsics.rs:3153)
==41511==    by 0x11CB89: san_out_of_bounds::main (san-out-of-bounds.rs:15)
==41511==    by 0x11C46A: core::ops::function::FnOnce::call_once (function.rs:250)
==41511==    by 0x11C5DD: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==41511==    by 0x11D030: std::rt::lang_start::{{closure}} (rt.rs:159)
==41511==    by 0x13374F: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==41511==    by 0x13374F: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==41511==    by 0x13374F: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==41511==    by 0x13374F: {closure#2} (rt.rs:141)
==41511==    by 0x13374F: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==41511==    by 0x13374F: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==41511==    by 0x13374F: std::rt::lang_start_internal (rt.rs:141)
==41511==    by 0x11D009: std::rt::lang_start (rt.rs:158)
==41511==    by 0x11CCFD: main (in /home/shaohua/dev/rust/intro-to-rust/target/debug/san-out-of-bounds)
==41511==  Address 0x4aa4b13 is 0 bytes after a block of size 3 alloc'd
==41511==    at 0x4840808: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==41511==    by 0x11C73A: alloc::alloc::alloc (alloc.rs:100)
==41511==    by 0x11C846: alloc::alloc::Global::alloc_impl (alloc.rs:183)
==41511==    by 0x11C677: allocate (alloc.rs:243)
==41511==    by 0x11C677: alloc::alloc::exchange_malloc (alloc.rs:332)
==41511==    by 0x11CAEA: san_out_of_bounds::main (san-out-of-bounds.rs:9)
==41511==    by 0x11C46A: core::ops::function::FnOnce::call_once (function.rs:250)
==41511==    by 0x11C5DD: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==41511==    by 0x11D030: std::rt::lang_start::{{closure}} (rt.rs:159)
==41511==    by 0x13374F: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==41511==    by 0x13374F: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==41511==    by 0x13374F: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==41511==    by 0x13374F: {closure#2} (rt.rs:141)
==41511==    by 0x13374F: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==41511==    by 0x13374F: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==41511==    by 0x13374F: std::rt::lang_start_internal (rt.rs:141)
==41511==    by 0x11D009: std::rt::lang_start (rt.rs:158)
==41511==    by 0x11CCFD: main (in /home/shaohua/dev/rust/intro-to-rust/target/debug/san-out-of-bounds)
==41511== 
==41511== Invalid read of size 1
==41511==    at 0x11CBC2: san_out_of_bounds::main (san-out-of-bounds.rs:21)
==41511==    by 0x11C46A: core::ops::function::FnOnce::call_once (function.rs:250)
==41511==    by 0x11C5DD: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==41511==    by 0x11D030: std::rt::lang_start::{{closure}} (rt.rs:159)
==41511==    by 0x13374F: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==41511==    by 0x13374F: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==41511==    by 0x13374F: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==41511==    by 0x13374F: {closure#2} (rt.rs:141)
==41511==    by 0x13374F: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==41511==    by 0x13374F: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==41511==    by 0x13374F: std::rt::lang_start_internal (rt.rs:141)
==41511==    by 0x11D009: std::rt::lang_start (rt.rs:158)
==41511==    by 0x11CCFD: main (in /home/shaohua/dev/rust/intro-to-rust/target/debug/san-out-of-bounds)
==41511==  Address 0x4aa4b14 is 1 bytes after a block of size 3 alloc'd
==41511==    at 0x4840808: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==41511==    by 0x11C73A: alloc::alloc::alloc (alloc.rs:100)
==41511==    by 0x11C846: alloc::alloc::Global::alloc_impl (alloc.rs:183)
==41511==    by 0x11C677: allocate (alloc.rs:243)
==41511==    by 0x11C677: alloc::alloc::exchange_malloc (alloc.rs:332)
==41511==    by 0x11CAEA: san_out_of_bounds::main (san-out-of-bounds.rs:9)
==41511==    by 0x11C46A: core::ops::function::FnOnce::call_once (function.rs:250)
==41511==    by 0x11C5DD: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==41511==    by 0x11D030: std::rt::lang_start::{{closure}} (rt.rs:159)
==41511==    by 0x13374F: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==41511==    by 0x13374F: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==41511==    by 0x13374F: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==41511==    by 0x13374F: {closure#2} (rt.rs:141)
==41511==    by 0x13374F: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==41511==    by 0x13374F: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==41511==    by 0x13374F: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==41511==    by 0x13374F: std::rt::lang_start_internal (rt.rs:141)
==41511==    by 0x11D009: std::rt::lang_start (rt.rs:158)
==41511==    by 0x11CCFD: main (in /tmp/san-out-of-bounds)
==41511== 
==41511== 
==41511== HEAP SUMMARY:
==41511==     in use at exit: 0 bytes in 0 blocks
==41511==   total heap usage: 10 allocs, 10 frees, 2,163 bytes allocated
==41511== 
==41511== All heap blocks were freed -- no leaks are possible
==41511== 
==41511== For lists of detected and suppressed errors, rerun with: -s
==41511== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
