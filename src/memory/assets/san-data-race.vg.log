==174647== Helgrind, a thread error detector
==174647== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==174647== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==174647== Command: ./san-data-race
==174647== Parent PID: 24939
==174647== 
==174647== ---Thread-Announcement------------------------------------------
==174647== 
==174647== Thread #1 is the program's root thread
==174647== 
==174647== ---Thread-Announcement------------------------------------------
==174647== 
==174647== Thread #3 was created
==174647==    at 0x49D086F: clone (clone.S:76)
==174647==    by 0x49D09C0: __clone_internal_fallback (clone-internal.c:71)
==174647==    by 0x49D09C0: __clone_internal (clone-internal.c:117)
==174647==    by 0x494E9EF: create_thread (pthread_create.c:297)
==174647==    by 0x494F49D: pthread_create@@GLIBC_2.34 (pthread_create.c:833)
==174647==    by 0x484BDD5: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==174647==    by 0x146971: std::sys::pal::unix::thread::Thread::new (thread.rs:87)
==174647==    by 0x126FCC: std::thread::Builder::spawn_unchecked_ (mod.rs:580)
==174647==    by 0x12657E: std::thread::Builder::spawn_unchecked (mod.rs:456)
==174647==    by 0x1264A1: spawn<san_data_race::main::{closure_env#1}, ()> (mod.rs:388)
==174647==    by 0x1264A1: std::thread::spawn (mod.rs:697)
==174647==    by 0x124D32: san_data_race::main (san-data-race.rs:27)
==174647==    by 0x1234FA: core::ops::function::FnOnce::call_once (function.rs:250)
==174647==    by 0x12033D: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==174647== 
==174647== ----------------------------------------------------------------
==174647== 
==174647== Possible data race during write of size 4 at 0x16ADD0 by thread #1
==174647== Locks held: none
==174647==    at 0x124D33: san_data_race::main (san-data-race.rs:34)
==174647==    by 0x1234FA: core::ops::function::FnOnce::call_once (function.rs:250)
==174647==    by 0x12033D: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==174647==    by 0x1226C0: std::rt::lang_start::{{closure}} (rt.rs:159)
==174647==    by 0x13F0AF: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==174647==    by 0x13F0AF: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:559)
==174647==    by 0x13F0AF: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:523)
==174647==    by 0x13F0AF: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:149)
==174647==    by 0x13F0AF: {closure#2} (rt.rs:141)
==174647==    by 0x13F0AF: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:559)
==174647==    by 0x13F0AF: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:523)
==174647==    by 0x13F0AF: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:149)
==174647==    by 0x13F0AF: std::rt::lang_start_internal (rt.rs:141)
==174647==    by 0x122699: std::rt::lang_start (rt.rs:158)
==174647==    by 0x124F3D: main (in /tmp/san-data-race)
==174647== 
==174647== This conflicts with a previous write of size 4 by thread #3
==174647== Locks held: none
==174647==    at 0x122A30: san_data_race::main::{{closure}} (san-data-race.rs:30)
==174647==    by 0x120365: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:155)
==174647==    by 0x128685: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (mod.rs:542)
==174647==    by 0x121025: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once (unwind_safe.rs:272)
==174647==    by 0x12054B: std::panicking::try::do_call (panicking.rs:559)
==174647==    by 0x1206FA: __rust_try (in /tmp/san-data-race)
==174647==    by 0x120485: std::panicking::try (panicking.rs:523)
==174647==    by 0x127D46: catch_unwind<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#2}::{closure_env#0}<san_data_race::main::{closure_env#1}, ()>>, ()> (panic.rs:149)
==174647==    by 0x127D46: std::thread::Builder::spawn_unchecked_::{{closure}} (mod.rs:541)
==174647==  Address 0x16add0 is 0 bytes inside data symbol "_ZN13san_data_race14SHARED_COUNTER17h75b4b0961c850d6dE"
==174647== 
==174647== 
==174647== Use --history-level=approx or =none to gain increased speed, at
==174647== the cost of reduced accuracy of conflicting-access information
==174647== For lists of detected and suppressed errors, rerun with: -s
==174647== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
